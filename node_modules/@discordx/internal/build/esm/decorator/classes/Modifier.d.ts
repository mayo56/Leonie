import { Decorator } from "./Decorator.js";
export declare type ModifyFunction<ToModify extends Decorator> = (original: ToModify) => unknown;
/**
 * @category Internal
 */
export declare class Modifier<ToModify extends Decorator = Decorator> extends Decorator {
    private _toModify;
    private _modifyTypes;
    protected constructor(toModify: ModifyFunction<ToModify>, modifyTypes: unknown[]);
    static create<ToModifyEx extends Decorator>(toModify: ModifyFunction<ToModifyEx>, ...modifyTypes: unknown[]): Modifier<ToModifyEx>;
    /**
     * Apply the modifier to a list of objects
     * it only applies the modifications to linked objects
     * that are on the targets type of modification
     * @param modifiers The modifier list
     * @param originals The list of objects to modify
     * @returns
     */
    static applyFromModifierListToList(modifiers: Modifier[], originals: Decorator[]): Promise<void[]>;
    applyModifications(original: ToModify): unknown;
}
