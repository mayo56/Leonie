/**
 * It create on instance of a classe and store it globally using
 * the singleton design pattern
 * @category Internal
 */
export class DIService {
    static _instance;
    static _container;
    static get container() {
        return this._container;
    }
    static set container(container) {
        this._container = container;
    }
    static get instance() {
        if (!this._instance) {
            this._instance = new DIService();
        }
        return this._instance;
    }
    _services = new Map();
    static _ServiceSet = new Set();
    /**
     * Get all the services from the DI container
     */
    static get allServices() {
        return DIService._ServiceSet;
    }
    addService(classType) {
        DIService._ServiceSet.add(classType);
        const myClass = classType;
        if (DIService.container) {
            DIService.container.registerSingleton(myClass);
        }
        else {
            const instance = new myClass();
            this._services.set(classType, instance);
        }
    }
    getService(classType) {
        const myClass = classType;
        if (DIService.container) {
            return DIService.container.resolve(myClass);
        }
        return this._services.get(classType);
    }
}
//# sourceMappingURL=index.js.map