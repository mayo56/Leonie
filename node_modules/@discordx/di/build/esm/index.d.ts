import { DependencyContainer } from "tsyringe";
export declare type InstanceOf<T> = T extends new (...args: any[]) => infer R ? R : any;
/**
 * It create on instance of a classe and store it globally using
 * the singleton design pattern
 * @category Internal
 */
export declare class DIService {
    private static _instance;
    private static _container?;
    static get container(): DependencyContainer | undefined;
    static set container(container: DependencyContainer | undefined);
    static get instance(): DIService;
    private _services;
    private static _ServiceSet;
    /**
     * Get all the services from the DI container
     */
    static get allServices(): Set<unknown>;
    addService<T>(classType: T): void;
    getService<T>(classType: T): InstanceOf<T>;
}
