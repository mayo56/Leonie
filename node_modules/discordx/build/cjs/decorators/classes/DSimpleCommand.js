"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DSimpleCommand = void 0;
const index_js_1 = require("../../index.js");
const Method_js_1 = require("./Method.js");
/**
 * @category Decorator
 */
class DSimpleCommand extends Method_js_1.Method {
    _description;
    _name;
    _prefix;
    _defaultPermission;
    _directMessage;
    _argSplitter;
    _options = [];
    _permissions = [];
    _guilds;
    _botIds;
    _aliases;
    get aliases() {
        return this._aliases;
    }
    set aliases(value) {
        this._aliases = value;
    }
    get botIds() {
        return this._botIds;
    }
    set botIds(value) {
        this._botIds = value;
    }
    get prefix() {
        return this._prefix;
    }
    set prefix(value) {
        this._prefix = value;
    }
    get permissions() {
        return this._permissions;
    }
    set permissions(value) {
        this._permissions = value;
    }
    get guilds() {
        return this._guilds;
    }
    set guilds(value) {
        this._guilds = value;
    }
    get argSplitter() {
        return this._argSplitter;
    }
    set argSplitter(value) {
        this._argSplitter = value;
    }
    get directMessage() {
        return this._directMessage;
    }
    set directMessage(value) {
        this._directMessage = value;
    }
    get defaultPermission() {
        return this._defaultPermission;
    }
    set defaultPermission(value) {
        this._defaultPermission = value;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get description() {
        return this._description;
    }
    set description(value) {
        this._description = value;
    }
    get options() {
        return this._options;
    }
    set options(value) {
        this._options = value;
    }
    constructor(name, aliases, argSplitter, botIds, defaultPermission, description, directMessage, guilds, prefix) {
        super();
        this._name = name;
        this._description = description ?? this.name;
        this._defaultPermission = defaultPermission ?? true;
        this._directMessage = directMessage ?? true;
        this._argSplitter = argSplitter;
        this._options = [];
        this._permissions = [];
        this._prefix = prefix;
        this._guilds = guilds ?? [];
        this._botIds = botIds ?? [];
        this._aliases = aliases ?? [];
    }
    static create(name, aliases, argSplitter, botIds, defaultPermission, description, directMessage, guilds, prefix) {
        return new DSimpleCommand(name, aliases, argSplitter, botIds, defaultPermission, description, directMessage, guilds, prefix);
    }
    resolvePermissions(guild, command) {
        return (0, index_js_1.resolveIPermissions)(guild, command, this.permissions);
    }
    parseParams(command) {
        return command.options;
    }
    parseParamsEx(command) {
        if (!this.options.length) {
            return Promise.resolve([]);
        }
        const splitterEx = this.argSplitter ?? command.splitter ?? " ";
        const args = typeof splitterEx === "function"
            ? splitterEx(command)
            : command.argString
                .split(splitterEx)
                .filter((op) => op?.length)
                .map((op) => op.trim());
        return Promise.all(this.options
            .sort((a, b) => (a.index ?? 0) - (b.index ?? 0))
            .map((op, index) => {
            // only digits
            const id = args[index]?.replace(/\D/g, "");
            const invalidError = Error(`Invalid id given: ${args[index]}`);
            // undefined
            if (!args[index]?.length) {
                return undefined;
            }
            // Boolean
            if (op.type === index_js_1.SimpleCommandOptionType.Boolean) {
                return Boolean(args[index]);
            }
            // Number
            if (op.type === index_js_1.SimpleCommandOptionType.Number) {
                return Number(args[index]);
            }
            // Channel | undefined
            if (op.type === index_js_1.SimpleCommandOptionType.Channel) {
                if (!id?.length || id.length < 16 || id.length > 20) {
                    return invalidError;
                }
                return command.message.guild?.channels
                    .fetch(id)
                    .catch((err) => err);
            }
            // Role | undefined
            if (op.type === index_js_1.SimpleCommandOptionType.Role) {
                if (!id?.length || id.length < 16 || id.length > 20) {
                    return invalidError;
                }
                return command.message.guild?.roles.fetch(id).catch((err) => err);
            }
            // GuildMember | User | undefined
            if (op.type === index_js_1.SimpleCommandOptionType.User) {
                if (!id?.length || id.length < 16 || id.length > 20) {
                    return invalidError;
                }
                if (command.message.channel.type === "DM") {
                    return command.message.client.user?.id === id
                        ? command.message.client.user
                        : command.message.author.id === id
                            ? command.message.author
                            : invalidError;
                }
                return command.message.guild?.members.fetch(id).catch((err) => err);
            }
            // GuildMember | User | Role | undefined
            if (op.type === index_js_1.SimpleCommandOptionType.Mentionable) {
                if (!id?.length || id.length < 16 || id.length > 20) {
                    return invalidError;
                }
                if (command.message.channel.type === "DM") {
                    return command.message.client.user?.id === id
                        ? command.message.client.user
                        : command.message.author.id === id
                            ? command.message.author
                            : invalidError;
                }
                return (command.message.guild?.members.fetch(id).catch((err) => err) ??
                    command.message.guild?.roles.fetch(id).catch((err) => err));
            }
            // string
            return args[index];
        }));
    }
}
exports.DSimpleCommand = DSimpleCommand;
//# sourceMappingURL=DSimpleCommand.js.map