import type { ApplicationCommandPermissionData, Guild } from "discord.js";
import type { ArgSplitter, DSimpleCommandOption, IDefaultPermission, IGuild, IPermissions, IPrefix, SimpleCommandMessage, SimpleOptionType } from "../../index.js";
import { Method } from "./Method.js";
/**
 * @category Decorator
 */
export declare class DSimpleCommand extends Method {
    private _description;
    private _name;
    private _prefix;
    private _defaultPermission;
    private _directMessage;
    private _argSplitter?;
    private _options;
    private _permissions;
    private _guilds;
    private _botIds;
    private _aliases;
    get aliases(): string[];
    set aliases(value: string[]);
    get botIds(): string[];
    set botIds(value: string[]);
    get prefix(): IPrefix | undefined;
    set prefix(value: IPrefix | undefined);
    get permissions(): IPermissions[];
    set permissions(value: IPermissions[]);
    get guilds(): IGuild[];
    set guilds(value: IGuild[]);
    get argSplitter(): ArgSplitter | undefined;
    set argSplitter(value: ArgSplitter | undefined);
    get directMessage(): boolean;
    set directMessage(value: boolean);
    get defaultPermission(): IDefaultPermission;
    set defaultPermission(value: IDefaultPermission);
    get name(): string;
    set name(value: string);
    get description(): string;
    set description(value: string);
    get options(): DSimpleCommandOption[];
    set options(value: DSimpleCommandOption[]);
    protected constructor(name: string, aliases?: string[], argSplitter?: ArgSplitter, botIds?: string[], defaultPermission?: boolean, description?: string, directMessage?: boolean, guilds?: IGuild[], prefix?: IPrefix);
    static create(name: string, aliases?: string[], argSplitter?: ArgSplitter, botIds?: string[], defaultPermission?: boolean, description?: string, directMessage?: boolean, guilds?: IGuild[], prefix?: IPrefix): DSimpleCommand;
    resolvePermissions(guild: Guild, command: SimpleCommandMessage): Promise<ApplicationCommandPermissionData[]>;
    parseParams(command: SimpleCommandMessage): SimpleOptionType[];
    parseParamsEx(command: SimpleCommandMessage): Promise<SimpleOptionType[]>;
}
