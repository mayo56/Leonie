import { Decorator } from "@discordx/internal";
import type { ApplicationCommandOptionDataX, ChannelTypes, DApplicationCommandOptionChoice, SlashAutoCompleteOption, SlashOptionType } from "../../index.js";
/**
 * @category Decorator
 */
export declare class DApplicationCommandOption extends Decorator {
    private _autocomplete;
    private _channelTypes;
    private _choices;
    private _description;
    private _name;
    private _maxValue?;
    private _minValue?;
    private _options;
    private _required;
    private _type;
    get isNode(): boolean;
    get options(): DApplicationCommandOption[];
    set options(value: DApplicationCommandOption[]);
    get channelTypes(): ChannelTypes[] | undefined;
    set channelTypes(value: ChannelTypes[] | undefined);
    get name(): string;
    set name(value: string);
    get maxValue(): number | undefined;
    set maxValue(value: number | undefined);
    get minValue(): number | undefined;
    set minValue(value: number | undefined);
    get type(): SlashOptionType;
    set type(value: SlashOptionType);
    get autocomplete(): SlashAutoCompleteOption;
    set autocomplete(value: SlashAutoCompleteOption);
    get description(): string;
    set description(value: string);
    get required(): boolean;
    set required(value: boolean);
    get choices(): DApplicationCommandOptionChoice[];
    set choices(value: DApplicationCommandOptionChoice[]);
    protected constructor(name: string, autocomplete?: SlashAutoCompleteOption, channelType?: ChannelTypes[], description?: string, index?: number, maxValue?: number, minValue?: number, required?: boolean, type?: SlashOptionType);
    static create(name: string, autocomplete?: SlashAutoCompleteOption, channelType?: ChannelTypes[], description?: string, index?: number, maxValue?: number, minValue?: number, required?: boolean, type?: SlashOptionType): DApplicationCommandOption;
    toJSON(): ApplicationCommandOptionDataX;
}
