"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Method = void 0;
const internal_1 = require("@discordx/internal");
const index_js_1 = require("../../index.js");
/**
 * @category Decorator
 */
class Method extends internal_1.Decorator {
    _discord;
    _guards = [];
    get discord() {
        return this._discord;
    }
    set discord(value) {
        this._discord = value;
    }
    /**
     * Compiled methods executes all the guards and the main method
     * ```ts
     * compiledMethod = async (params: ArgsOf<any>, client: Client) => {
     *   guard1(params, client)
     *   guard2(params, client)
     *   guard3(params, client)
     *   main(params, client)
     * }
     * ```
     * @returns
     */
    get execute() {
        return (guards, ...params) => {
            const globalGuards = guards.map((guard) => index_js_1.DGuard.create(guard.bind(undefined)));
            return this.getGuardFunction(globalGuards)(...params);
        };
    }
    /**
     * Returns all the guards of the application
     * The guards that are defined globally with Client
     * The guards that decorate @Discord
     * The guards that decorate the method (this)
     */
    get guards() {
        return [
            ...this.discord.guards,
            ...this._guards,
            index_js_1.DGuard.create(this._method?.bind(this._discord.instance)),
        ];
    }
    set guards(value) {
        this._guards = value;
    }
    /**
     * Execute a guard with params
     */
    getGuardFunction(globalGuards) {
        const next = async (params, index, paramsToNext) => {
            const nextFn = () => next(params, index + 1, paramsToNext);
            const guardToExecute = [...globalGuards, ...this.guards][index];
            let res;
            if (index >= [...globalGuards, ...this.guards].length - 1) {
                // If it's the main method
                res = await guardToExecute?.fn(
                // method(...ParsedOptions, [Interaction, Client], ...) => method(...ParsedOptions, Interaction, Client, ...)
                ...this.parseParams(...params), ...params, paramsToNext);
            }
            else {
                // If it's the guards
                // method([Interaction, Client])
                res = await guardToExecute?.fn(...params, nextFn, paramsToNext);
            }
            if (res) {
                return res;
            }
            return paramsToNext;
        };
        return (...params) => next(params, 0, {});
    }
}
exports.Method = Method;
//# sourceMappingURL=Method.js.map