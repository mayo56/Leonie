import type { ApplicationCommandData, ApplicationCommandPermissions, ApplicationCommandType, CommandInteraction, Guild, GuildBasedChannel, GuildMember, Role, User } from "discord.js";
import type { APIInteractionDataResolvedChannel, APIInteractionDataResolvedGuildMember, APIRole } from "discord-api-types";
import type { ApplicationCommandMixin, ApplicationGuildMixin, IDefaultPermission, IGuild, IPermissions } from "../../index.js";
import { DApplicationCommandOption } from "../../index.js";
import { Method } from "./Method.js";
/**
 * @category Decorator
 */
export declare class DApplicationCommand extends Method {
    private _name;
    private _description;
    private _type;
    private _defaultPermission;
    private _options;
    private _permissions;
    private _guilds;
    private _group?;
    private _subgroup?;
    private _botIds;
    get type(): ApplicationCommandType;
    set type(value: ApplicationCommandType);
    get botIds(): string[];
    set botIds(value: string[]);
    get group(): string | undefined;
    set group(value: string | undefined);
    get subgroup(): string | undefined;
    set subgroup(value: string | undefined);
    get permissions(): IPermissions[];
    set permissions(value: IPermissions[]);
    get guilds(): IGuild[];
    set guilds(value: IGuild[]);
    get defaultPermission(): IDefaultPermission;
    set defaultPermission(value: IDefaultPermission);
    get name(): string;
    set name(value: string);
    get description(): string;
    set description(value: string);
    get options(): DApplicationCommandOption[];
    set options(value: DApplicationCommandOption[]);
    protected constructor(name: string, type: ApplicationCommandType, description?: string, defaultPermission?: boolean, guilds?: IGuild[], botIds?: string[]);
    static create(name: string, type: ApplicationCommandType, description?: string, defaultPermission?: boolean, guilds?: IGuild[], botIds?: string[]): DApplicationCommand;
    resolvePermissions(guild: Guild, command: ApplicationCommandMixin): Promise<ApplicationCommandPermissions[]>;
    toSubCommand(): DApplicationCommandOption;
    toJSON(command?: ApplicationGuildMixin): Promise<ApplicationCommandData>;
    parseParams(interaction: CommandInteraction): (string | number | boolean | Role | APIRole | GuildMember | APIInteractionDataResolvedChannel | GuildBasedChannel | APIInteractionDataResolvedGuildMember | User | undefined)[];
}
