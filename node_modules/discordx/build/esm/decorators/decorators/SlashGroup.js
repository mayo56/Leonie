import { Modifier } from "@discordx/internal";
import { DApplicationCommand, DApplicationCommandGroup, DDiscord, MetadataStorage, } from "../../index.js";
export function SlashGroup(options, root) {
    return function (target, key, descriptor) {
        if (typeof options === "string") {
            // If @SlashGroup decorate a method edit the method and add it to subgroup
            MetadataStorage.instance.addModifier(Modifier.create((original) => {
                if (original instanceof DDiscord) {
                    [...original.applicationCommands].forEach((obj) => {
                        obj.group = root ?? options;
                        obj.subgroup = root ? options : undefined;
                    });
                }
                else {
                    original.group = root ?? options;
                    original.subgroup = root ? options : undefined;
                }
            }, DApplicationCommand, DDiscord).decorateUnknown(target, key, descriptor));
        }
        else {
            const myClass = target;
            if (options.root) {
                MetadataStorage.instance.addApplicationCommandSlashSubGroups(DApplicationCommandGroup.create(options.name, { description: options.description }).decorate(myClass, myClass.name));
            }
            else {
                MetadataStorage.instance.addApplicationCommandSlashGroups(DApplicationCommandGroup.create(options.name, {
                    description: options.description,
                }).decorate(myClass, key ?? myClass.name));
            }
        }
    };
}
//# sourceMappingURL=SlashGroup.js.map