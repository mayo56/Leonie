import { Modifier } from "@discordx/internal";
import { DApplicationCommand, DApplicationCommandOption, MetadataStorage, } from "../../index.js";
export function SlashOption(name, options) {
    function getType(type) {
        switch (type) {
            case "GUILDMEMBER": {
                return "USER";
            }
            case "TEXTCHANNEL":
            case "VOICECHANNEL": {
                return "CHANNEL";
            }
            case "FUNCTION":
                throw Error(`invalid slash option (${name}): ${type}`);
            default:
                return type;
        }
    }
    return function (target, key, index) {
        const reflectedType = Reflect.getMetadata("design:paramtypes", target, key)[index].name.toUpperCase();
        const type = options?.type ?? getType(reflectedType);
        const option = DApplicationCommandOption.create(name, options?.autocomplete, options?.channelTypes, options?.description, index, options?.maxValue, options?.minValue, options?.required, type).decorate(target.constructor, key, target[key], target.constructor, index);
        MetadataStorage.instance.addModifier(Modifier.create((original) => {
            original.options = [...original.options, option];
        }, DApplicationCommand).decorate(target.constructor, key, target[key], target.constructor, index));
        MetadataStorage.instance.addApplicationCommandSlashOption(option);
    };
}
//# sourceMappingURL=SlashOption.js.map